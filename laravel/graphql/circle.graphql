type Circle {
    id: ID!
    name: String!
    kana: String
    memo: String
    created_at: DateTime
    updated_at: DateTime
}

input CircleInput {
    id: String
    name: String!
    kana: String
    memo: String
}

input CreateCircleParticipatingInEventInput {
    circle: CircleInput!
    placement: CirclePlacementInput!
}

extend type Query @guard {
    circle(id: ID @eq): Circle @find
}

extend type Mutation @guard {
    createCircle(
        input: CircleInput! @spread
    ): Circle!
        @field(
            resolver: "App\\GraphQL\\Mutations\\CreateCircle"
        )
    createCircleParticipatingInEvent(
        input: CreateCircleParticipatingInEventInput! @spread,
        force: Boolean,
    ): CirclePlacement!
        @field(
            resolver: "App\\GraphQL\\Mutations\\CreateCircleParticipatingInEvent"
        )
    updateCircleParticipatingInEvent(
        id: ID!,
        input: CreateCircleParticipatingInEventInput! @spread
    ): CirclePlacement!
        @field(
            resolver: "App\\GraphQL\\Mutations\\UpdateCircleParticipatingInEvent"
        )
    notParticipateCircleInEvent(
        circle_id: ID!,
        event_id: ID!,
    ): Circle! @field(
            resolver: "App\\GraphQL\\Mutations\\NotParticipateCircleInEvent"
        )
    cancelNotParticipateCircleInEvent(
        circle_id: ID!,
        event_id: ID!,
    ): Circle! @field(
            resolver: "App\\GraphQL\\Mutations\\CancelNotParticipateCircleInEvent"
        )
}
