type User {
    id: ID!
    name: String!
    name_kana: String
    handle_name: String
    handle_name_kana: String
    email: String
    affiliateTeams: [UserAffiliationTeam] @hasMany
    created_at: DateTime
    updated_at: DateTime
}

input UserInput {
    name: String!
    name_kana: String!
    handle_name: String!
    handle_name_kana: String!
    email: String!
    password: String!
}

type LoginData {
    error: String
}

type LogoutData {
    error: String
}

input LoginInput {
    email: String!
    password: String!
    remember_me: Boolean
}

type ForgetPasswordData {
    error: String
}

input ResetPasswordInput {
    email: String!
    password: String!
    password_confirmation: String!
    token: String!
}

type ResetPasswordData {
    error: String
}

extend type Query @guard {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    me: User! @auth
}

extend type Mutation {
    createUser(input: UserInput! @spread): User!
        @field(resolver: "App\\GraphQL\\Mutations\\CreateUser")
    login(input: LoginInput! @spread): LoginData
    logout: LogoutData @guard
        @field(resolver: "App\\GraphQL\\Mutations\\Logout")
    forgetPassword(email: String!): ForgetPasswordData!
        @field(resolver: "App\\GraphQL\\Mutations\\ForgetPassword")
    resetPassword(input: ResetPasswordInput! @spread): ResetPasswordData!
        @field(resolver: "App\\GraphQL\\Mutations\\ResetPassword")
}
