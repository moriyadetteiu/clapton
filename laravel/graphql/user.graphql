type User {
    id: ID!
    name: String!
    name_kana: String
    handle_name: String
    handle_name_kana: String
    email: String
    affiliateTeams: [UserAffiliationTeam] @hasMany
    created_at: DateTime
    updated_at: DateTime
}

input UserInput {
    name: String!
    name_kana: String!
    handle_name: String!
    handle_name_kana: String!
    email: String!
    password: String!
}

type LoginData {
    token: String
    error: String
    expires_in: Int
}

type LogoutData {
    error: String
}

input LoginInput {
    email: String!
    password: String!
}

extend type Query @guard {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    me: User! @auth
}

extend type Mutation {
    createUser(input: UserInput! @spread): User!
        @field(resolver: "App\\GraphQL\\Mutations\\CreateUser")
    login(input: LoginInput! @spread): LoginData
        @middleware(checks: ["guest:api"])
    logout: LogoutData @guard
        @field(resolver: "App\\GraphQL\\Mutations\\Logout")
}
