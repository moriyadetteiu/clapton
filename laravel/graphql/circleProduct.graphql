type CircleProduct {
    id: ID!
    name: String!
    price: Int
    circlePlacement: CirclePlacement @belongsTo
    circle_product_classification_id: ID
    circleProductClassification: CircleProductClassification @belongsTo
    wantCircleProducts: [WantCircleProduct!]! @hasMany
    created_at: DateTime
    updated_at: DateTime
}

type UpdatedCircleProduct {
    circleProduct: CircleProduct!
    updatedWantCircleProduct: WantCircleProduct
}

input CircleProductInput {
    circle_placement_id: ID
    circle_product_classification_id: ID!
    name: String!
    price: Int!
}

extend type Query @guard {
    circleProduct(id: ID @eq): CircleProduct
        @find
    circleProducts: [CircleProduct]! @all
}

extend type Mutation @guard {
    createCircleProduct(
        input: CircleProductInput! @spread
    ): CircleProduct!
        @field(
            resolver: "App\\GraphQL\\Mutations\\CreateCircleProduct"
        )
    updateCircleProduct(
        id: ID!,
        input: CircleProductInput! @spread
    ): UpdatedCircleProduct!
        @field(
            resolver: "App\\GraphQL\\Mutations\\UpdateCircleProduct"
        )
    unnecessaryCircleProduct(
        id: ID!
    ): CircleProduct
        @field(
            resolver: "App\\GraphQL\\Mutations\\UnnecessaryCircleProduct"
        )
}
