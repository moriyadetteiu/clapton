type JoinEvent {
    id: ID!
    user: User! @belongsTo
    team: Team! @belongsTo
    event: Event! @belongsTo
    joinEventDates: [JoinEventDate!]! @hasMany
    created_at: DateTime
    updated_at: DateTime
}

input JoinEventInput {
    team_id: ID
    event_id: ID
    join_event_dates: [JoinEventDateInput]
}

extend type Query @guard {
    findJoinEvent(event_id: ID! @eq, user_id: ID! @eq, team_id: ID! @eq): JoinEvent @find
    joinEvents(event_id: ID! @eq, team_id: ID! @eq): [JoinEvent]! @all
}

extend type Mutation @guard {
    createJoinEvent(
        input: JoinEventInput! @spread
    ): JoinEvent!
        @field(
            resolver: "App\\GraphQL\\Mutations\\CreateJoinEvent"
        )
    updateJoinEvent(
        id: ID!,
        input: JoinEventInput! @spread
    ): JoinEvent!
        @field(
            resolver: "App\\GraphQL\\Mutations\\UpdateJoinEvent"
        )
}
