"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query @guard {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    team(id: ID @eq): Team @find
    me: User! @auth
}

type User {
    id: ID!
    name: String!
    name_kana: String!
    handle_name: String!
    handle_name_kana: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Team {
    id: ID!
    name: String!
    code: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Event {
    id: ID!
    name: String!
    event_dates: [EventDate]
    created_at: DateTime!
    updated_at: DateTime!
}

type EventDate {
    id: ID!
    name: String!
    date: Date!
    created_at: DateTime!
    updated_at: DateTime!
}

type Mutation {
    createUser(input: UserInput! @spread): User!
        @field(resolver: "App\\GraphQL\\Mutations\\CreateUser")
    login(input: LoginInput! @spread): LoginData
        @middleware(checks: ["guest:api"])
}

extend type Mutation @guard {
    createTeam(input: TeamInput! @spread): Team!
        @field(resolver: "App\\GraphQL\\Mutations\\CreateTeam")
    createEvent(input: EventInput! @spread) : Event!
        @field(resolver: "App\\GraphQL\\Mutations\\CreateEvent")
}

input UserInput {
    name: String!
    name_kana: String!
    handle_name: String!
    handle_name_kana: String!
    email: String!
    password: String!
}

input TeamInput {
    name: String!
}

input EventInput {
    name: String!
    event_dates: [EventDateInput]
}

input EventDateInput {
    name: String!
    date: Date!
    is_production_day: Boolean!
}

type LoginData {
    token: String
    error: String
    expires_in: Int
}

input LoginInput {
    email: String!
    password: String!
}

