version: 2.1

commands:
  pull-front-node_modules:
    steps:
      - restore_cache:
          keys:
            - front-node_modules-{{ checksum "./front/package-lock.json" }}
            - front-node_modules-
      - run: docker-compose exec front npm install
      - save_cache:
            paths:
                - "./front/node_modules"
            key: front-node_modules-{{ checksum "./front/package-lock.json" }}

  pull-mock-node_modules:
    steps:
      - restore_cache:
          keys:
            - mock-node_modules-{{ checksum "./mock/package-lock.json" }}
            - mock-node_modules-
      - run: docker-compose exec mock npm install
      - save_cache:
            paths:
                - "./mock/node_modules"
            key: mock-node_modules-{{ checksum "./mock/package-lock.json" }}

  pull-laravel-composer:
    steps:
      - restore_cache:
          keys:
            - laravel-composer-{{ checksum "./laravel/composer.lock" }}
            - laravel-composer-
      - run: docker-compose exec laravel composer install
      - save_cache:
            paths:
                - "./laravel/vendor"
            key: laravel-composer-{{ checksum "./laravel/composer.lock" }}

executors:
  test-executer:
    machine:
      image: ubuntu-2204:2022.04.1

jobs:
  test:
    executor: test-executer
    steps:
      - checkout
      - run:
          # ci特有の設定が必要になりそうなら、.env.ci的なのを切る
          name: pre docker-compose
          command: cp ./docker/mysql/.env.example ./docker/mysql/.env
      - run: docker-compose up -d --build
      - pull-front-node_modules
      - pull-mock-node_modules
      - pull-laravel-composer
      - run:
          name: is spell check project dictionary sorted
          # note: diffコマンドは差分がある場合、終了ステータスが1になるので、ソート前と後に差分があったらCI上でエラーとみなされる
          command: diff ./cspell/project-words.txt <(cat ./cspell/project-words.txt | sort)
          when: always
      - run:
          name: spell check
          command: docker-compose exec spell_checker cspell "**/*.php" "**/*.js" "**/*.ts" "**/*.vue" --gitignore
          when: always
      - run:
          name: code style check(front)
          command: docker-compose exec front npm run lint
          when: always
      - run:
          name: code style check(mock)
          command: echo "TODO:lintをかけれるようにする"
          when: always
      - run:
          name: code style check(laravel)
          command: docker-compose exec laravel ./vendor/bin/phpcs --standard=phpcs.xml --extensions=php .
          when: always
      - run:
          name: prepare laravel test
          command: |
            cp ./laravel/.env.circleci ./laravel/.env
            docker-compose exec laravel chmod -R 777 storage
            docker-compose exec laravel chmod -R 777 bootstrap/cache
            docker-compose exec laravel php artisan key:generate
            docker-compose exec laravel php artisan migrate
      - run:
          name: build front
          command: |
            docker-compose exec front npm run codegen
            docker-compose exec front npm run sync-validation
            docker-compose exec front npm run build
      - persist_to_workspace:
          root: ./front
          paths:
              - apollo/graphql.ts
              - validation/validations.ts
      - run:
          name: test front
          command: docker-compose exec front npm run test
      - run:
          name: test laravel
          command: docker-compose exec laravel ./vendor/bin/phpunit
      - store_artifacts:
          path: ./laravel/storage/logs
  build:
    executor: test-executer
    steps:
      - checkout
      - run: docker-compose -f docker-compose-prod-build.yml up -d --build
      - run:
          name: prepare laravel container
          command: |
            cp ./laravel/.env.prod ./laravel/.env
            rm ./laravel/.env.prod
            rm ./laravel/.env.circleci
            rm ./laravel/.env.example
            docker cp ./laravel/. laravel:/var/www/html
            docker-compose -f docker-compose-prod-build.yml exec laravel chmod -R 777 storage
            docker-compose -f docker-compose-prod-build.yml exec laravel chmod -R 777 bootstrap/cache
            docker-compose -f docker-compose-prod-build.yml exec laravel composer install --no-dev
      - attach_workspace:
          at: /tmp
      - run:
          name: prepare front container
          command: |
            cp /tmp/apollo/graphql.ts ./front/apollo
            cp /tmp/validation/validations.ts ./front/validation
            cp ./front/.env.prod ./front/.env
            docker cp ./front/. front:/usr/src/app
            docker-compose -f docker-compose-prod-build.yml exec front npm install
            docker-compose -f docker-compose-prod-build.yml exec front npm run build
      - run:
          name: prepare nginx container
          command: |
            docker cp ./laravel/public nginx:/var/www/html
      - run:
          name: commit docker image
          command: |
            docker commit laravel clapton_laravel
            docker commit front clapton_front
            docker commit nginx clapton_nginx
            docker tag clapton_laravel:latest ${DOCKER_HUB_USERNAME}/clapton_laravel:$CIRCLE_TAG
            docker tag clapton_front:latest ${DOCKER_HUB_USERNAME}/clapton_front:$CIRCLE_TAG
            docker tag clapton_nginx:latest ${DOCKER_HUB_USERNAME}/clapton_nginx:$CIRCLE_TAG
      - run:
          name: push docker image
          command: |
            docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}
            docker push ${DOCKER_HUB_USERNAME}/clapton_laravel:$CIRCLE_TAG
            docker push ${DOCKER_HUB_USERNAME}/clapton_front:$CIRCLE_TAG
            docker push ${DOCKER_HUB_USERNAME}/clapton_nginx:$CIRCLE_TAG


workflows:
  version: 2
  test:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
              - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
